<%
var log = new Log("api/enterprise.jag");

var uri = request.getRequestURI();
var uriMatcher = new URIMatcher(String(uri));

var constants = require("/app/modules/constants.js");
var devicemgtProps = require("/app/modules/conf-reader/main.js")["conf"];
var userModule = require("/app/modules/business-controllers/user.js")["userModule"];
var restAPIRequestDetails = request.getContent();
var result;
var user = session.get(constants.USER_SESSION_KEY);

// This checks if the session is valid
getAccessToken = function() {
    if (session) {
        var tokenPair = session.get(constants["TOKEN_PAIR"]);
        if (tokenPair) {
            return parse(tokenPair)["accessToken"];
        }
    }
    return null;
};

callBackend = function(url, token, method, payload) {
    var xmlHttpRequest = new XMLHttpRequest();
    xmlHttpRequest.open(method, url);
    xmlHttpRequest.setRequestHeader(constants["AUTHORIZATION_HEADER"], constants["BEARER_PREFIX"] + token);
    xmlHttpRequest.setRequestHeader(constants["CONTENT_TYPE_IDENTIFIER"], constants["APPLICATION_JSON"]);
    xmlHttpRequest.setRequestHeader(constants["ACCEPT_IDENTIFIER"], constants["APPLICATION_JSON"]);
    if (payload) {
        xmlHttpRequest.send(payload);
    } else {
        xmlHttpRequest.send();
    }
    response["status"] = xmlHttpRequest["status"];
    if (xmlHttpRequest["responseText"]) {
        result = xmlHttpRequest["responseText"];
        response["content"] = xmlHttpRequest["responseText"];
    }
};

var accessToken = getAccessToken();
if (!user || accessToken == null) {
    response.sendRedirect("/devicemgt/login?#login-required");
    exit();
} else {
    response.contentType = 'application/json';
    if (uriMatcher.match("/{context}/api/enterprise/token")) {
        session.put("externalEndpoint", restAPIRequestDetails["endpoint"]);
        session.put("externalToken", restAPIRequestDetails["externalToken"]);
        log.info("Calling get token");
        callBackend(restAPIRequestDetails["endpoint"], session.get("externalToken"), "POST", restAPIRequestDetails);
        if (response["status"] && response["status"] == 200) {
            var completionToken = parse(result)["completionToken"];
            if (completionToken) {
                log.info("Token received");
                session.put("completionToken", completionToken)
            }
        }
    } else if (uriMatcher.match("/{context}/api/enterprise/enroll-complete")) {
        var tokenEndpoint = session.get("externalEndpoint")
        var enterpriseEndpoint = tokenEndpoint.replace("signup-url", "complete-signup");

        var completionToken = session.get("completionToken");
        var enterpriseToken = request.getParameter("enterpriseToken");

        log.debug("completionToken" + completionToken + ", enterpriseEndpoint" + enterpriseEndpoint +
            ", enterpriseToken" + enterpriseToken);

        var requestPayload = {}
        requestPayload.completionToken = completionToken;
        requestPayload.enterpriseToken = enterpriseToken;
        log.info("Calling complete-signup");
        callBackend(enterpriseEndpoint, session.get("externalToken"), "POST", requestPayload);

        var enterpriseId = parse(result)["id"];
        if (enterpriseId) {
            log.info("Calling complete-signup success");
            var serviceAccountRequest = {};
            serviceAccountRequest.enterpriseId = enterpriseId;
            serviceAccountRequest.keyType = "googleCredentials"

            var enterpriseEndpoint = tokenEndpoint.replace("signup-url", "create-esa");

            log.info("Calling create-esa");
            callBackend(enterpriseEndpoint, session.get("externalToken"), "POST", serviceAccountRequest);
            var data = parse(result)["data"];
            log.info("Calling create-esa success" + data);

            var androidConfigAPI = devicemgtProps["httpsURL"] + "/api/device-mgt/android/v1.0/configuration";
            log.info("fetching platform configs");
            callBackend(androidConfigAPI, accessToken, "GET");

            var configurationsList = parse(result);

            for (var x = 0; x < configurationsList.configuration.length; x++) {
                if (configurationsList.configuration[x].name == "esa" || configurationsList.configuration[x].name == "enterpriseId") {
                    configurationsList.configuration.splice(x, 1);
                }
            }
            log.info("fetching platform configs success");
            var payloadToAdd = {};
            payloadToAdd.contentType = "text";
            payloadToAdd.name = "esa";
            payloadToAdd.value = data;

            var enterpriseIdPayload = {};
            enterpriseIdPayload.contentType = "text";
            enterpriseIdPayload.name = "enterpriseId";
            enterpriseIdPayload.value = enterpriseId;

            configurationsList.configuration[configurationsList.configuration.length] = payloadToAdd;
            configurationsList.configuration[configurationsList.configuration.length] = enterpriseIdPayload;

            log.info("saving platform configs");
            callBackend(androidConfigAPI, accessToken, "PUT", configurationsList);
            log.info("saving platform configs success");
            if (response["status"] == 200) {
                log.info("Process successful!! Redirecting...");
                response.sendRedirect("/devicemgt/platform-configuration?enterprise-success=true");
            }
        }
    } else if (uriMatcher.match("/{context}/api/enterprise/asdsad/unenroll")) {
        session.put("externalEndpoint", restAPIRequestDetails["endpoint"]);
        session.put("externalToken", restAPIRequestDetails["externalToken"]);
        callBackend(restAPIRequestDetails["endpoint"], session.get("externalToken"), "POST", restAPIRequestDetails);
    }

}

%>
